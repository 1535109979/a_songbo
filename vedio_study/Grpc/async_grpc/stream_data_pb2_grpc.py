# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from a_songbo.Grpc.async_grpc import stream_data_pb2 as stream__data__pb2


class StreamRpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerResult = channel.unary_unary(
                '/StreamRpc/GetServerResult',
                request_serializer=stream__data__pb2.Requests.SerializeToString,
                response_deserializer=stream__data__pb2.Reply.FromString,
                )
        self.GetServerStream = channel.unary_stream(
                '/StreamRpc/GetServerStream',
                request_serializer=stream__data__pb2.Requests.SerializeToString,
                response_deserializer=stream__data__pb2.Reply.FromString,
                )
        self.ClientSendStream = channel.stream_unary(
                '/StreamRpc/ClientSendStream',
                request_serializer=stream__data__pb2.Requests.SerializeToString,
                response_deserializer=stream__data__pb2.Reply.FromString,
                )
        self.ServerClientStream = channel.stream_stream(
                '/StreamRpc/ServerClientStream',
                request_serializer=stream__data__pb2.Requests.SerializeToString,
                response_deserializer=stream__data__pb2.Reply.FromString,
                )


class StreamRpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetServerResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientSendStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerClientStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamRpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServerResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerResult,
                    request_deserializer=stream__data__pb2.Requests.FromString,
                    response_serializer=stream__data__pb2.Reply.SerializeToString,
            ),
            'GetServerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetServerStream,
                    request_deserializer=stream__data__pb2.Requests.FromString,
                    response_serializer=stream__data__pb2.Reply.SerializeToString,
            ),
            'ClientSendStream': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientSendStream,
                    request_deserializer=stream__data__pb2.Requests.FromString,
                    response_serializer=stream__data__pb2.Reply.SerializeToString,
            ),
            'ServerClientStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ServerClientStream,
                    request_deserializer=stream__data__pb2.Requests.FromString,
                    response_serializer=stream__data__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StreamRpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamRpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetServerResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StreamRpc/GetServerResult',
            stream__data__pb2.Requests.SerializeToString,
            stream__data__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/StreamRpc/GetServerStream',
            stream__data__pb2.Requests.SerializeToString,
            stream__data__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientSendStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/StreamRpc/ClientSendStream',
            stream__data__pb2.Requests.SerializeToString,
            stream__data__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerClientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/StreamRpc/ServerClientStream',
            stream__data__pb2.Requests.SerializeToString,
            stream__data__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
