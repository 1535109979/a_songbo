# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from a_songbo.vn.proto import account_position_pb2 as account__position__pb2
from a_songbo.vn.proto import trade_server_pb2 as trade__server__pb2


class TradeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sub_account = channel.unary_unary(
                '/trade_server.Trade/sub_account',
                request_serializer=trade__server__pb2.SubAccountRequest.SerializeToString,
                response_deserializer=account__position__pb2.AccountBook.FromString,
                )
        self.get_account_book = channel.unary_unary(
                '/trade_server.Trade/get_account_book',
                request_serializer=trade__server__pb2.GetAccountBookRequest.SerializeToString,
                response_deserializer=account__position__pb2.AccountBook.FromString,
                )
        self.insert_order = channel.unary_unary(
                '/trade_server.Trade/insert_order',
                request_serializer=trade__server__pb2.InsertOrderRequest.SerializeToString,
                response_deserializer=trade__server__pb2.InsertOrderReply.FromString,
                )
        self.cancel_order = channel.unary_unary(
                '/trade_server.Trade/cancel_order',
                request_serializer=trade__server__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=trade__server__pb2.CancelOrderReply.FromString,
                )


class TradeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def sub_account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_account_book(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sub_account': grpc.unary_unary_rpc_method_handler(
                    servicer.sub_account,
                    request_deserializer=trade__server__pb2.SubAccountRequest.FromString,
                    response_serializer=account__position__pb2.AccountBook.SerializeToString,
            ),
            'get_account_book': grpc.unary_unary_rpc_method_handler(
                    servicer.get_account_book,
                    request_deserializer=trade__server__pb2.GetAccountBookRequest.FromString,
                    response_serializer=account__position__pb2.AccountBook.SerializeToString,
            ),
            'insert_order': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_order,
                    request_deserializer=trade__server__pb2.InsertOrderRequest.FromString,
                    response_serializer=trade__server__pb2.InsertOrderReply.SerializeToString,
            ),
            'cancel_order': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel_order,
                    request_deserializer=trade__server__pb2.CancelOrderRequest.FromString,
                    response_serializer=trade__server__pb2.CancelOrderReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trade_server.Trade', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Trade(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def sub_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trade_server.Trade/sub_account',
            trade__server__pb2.SubAccountRequest.SerializeToString,
            account__position__pb2.AccountBook.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_account_book(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trade_server.Trade/get_account_book',
            trade__server__pb2.GetAccountBookRequest.SerializeToString,
            account__position__pb2.AccountBook.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trade_server.Trade/insert_order',
            trade__server__pb2.InsertOrderRequest.SerializeToString,
            trade__server__pb2.InsertOrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trade_server.Trade/cancel_order',
            trade__server__pb2.CancelOrderRequest.SerializeToString,
            trade__server__pb2.CancelOrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
